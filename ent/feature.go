// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"guide/ent/feature"
	"guide/ent/parameter"
	"guide/ent/product"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Feature is the model entity for the Feature schema.
type Feature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// ParameterID holds the value of the "parameter_id" field.
	ParameterID int `json:"parameter_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeatureQuery when eager-loading is set.
	Edges FeatureEdges `json:"edges"`
}

// FeatureEdges holds the relations/edges for other nodes in the graph.
type FeatureEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// Parameter holds the value of the parameter edge.
	Parameter *Parameter `json:"parameter,omitempty"`
	// Segments holds the value of the segments edge.
	Segments []*Segment `json:"segments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeatureEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ParameterOrErr returns the Parameter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeatureEdges) ParameterOrErr() (*Parameter, error) {
	if e.loadedTypes[1] {
		if e.Parameter == nil {
			// The edge parameter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: parameter.Label}
		}
		return e.Parameter, nil
	}
	return nil, &NotLoadedError{edge: "parameter"}
}

// SegmentsOrErr returns the Segments value or an error if the edge
// was not loaded in eager-loading.
func (e FeatureEdges) SegmentsOrErr() ([]*Segment, error) {
	if e.loadedTypes[2] {
		return e.Segments, nil
	}
	return nil, &NotLoadedError{edge: "segments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feature) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feature.FieldID, feature.FieldProductID, feature.FieldParameterID:
			values[i] = new(sql.NullInt64)
		case feature.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Feature", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feature fields.
func (f *Feature) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case feature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feature.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				f.ProductID = int(value.Int64)
			}
		case feature.FieldParameterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parameter_id", values[i])
			} else if value.Valid {
				f.ParameterID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProduct queries the "product" edge of the Feature entity.
func (f *Feature) QueryProduct() *ProductQuery {
	return (&FeatureClient{config: f.config}).QueryProduct(f)
}

// QueryParameter queries the "parameter" edge of the Feature entity.
func (f *Feature) QueryParameter() *ParameterQuery {
	return (&FeatureClient{config: f.config}).QueryParameter(f)
}

// QuerySegments queries the "segments" edge of the Feature entity.
func (f *Feature) QuerySegments() *SegmentQuery {
	return (&FeatureClient{config: f.config}).QuerySegments(f)
}

// Update returns a builder for updating this Feature.
// Note that you need to call Feature.Unwrap() before calling this method if this Feature
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feature) Update() *FeatureUpdateOne {
	return (&FeatureClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Feature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feature) Unwrap() *Feature {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feature is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feature) String() string {
	var builder strings.Builder
	builder.WriteString("Feature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ProductID))
	builder.WriteString(", ")
	builder.WriteString("parameter_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ParameterID))
	builder.WriteByte(')')
	return builder.String()
}

// Features is a parsable slice of Feature.
type Features []*Feature

func (f Features) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
