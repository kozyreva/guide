// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArticlesColumns holds the columns for the "articles" table.
	ArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "number", Type: field.TypeFloat64},
		{Name: "document_articles", Type: field.TypeInt},
	}
	// ArticlesTable holds the schema information for the "articles" table.
	ArticlesTable = &schema.Table{
		Name:       "articles",
		Columns:    ArticlesColumns,
		PrimaryKey: []*schema.Column{ArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "articles_documents_articles",
				Columns:    []*schema.Column{ArticlesColumns[2]},
				RefColumns: []*schema.Column{DocumentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "date", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
	}
	// FeaturesColumns holds the columns for the "features" table.
	FeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "product_id", Type: field.TypeInt},
		{Name: "parameter_id", Type: field.TypeInt},
	}
	// FeaturesTable holds the schema information for the "features" table.
	FeaturesTable = &schema.Table{
		Name:       "features",
		Columns:    FeaturesColumns,
		PrimaryKey: []*schema.Column{FeaturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "features_products_product",
				Columns:    []*schema.Column{FeaturesColumns[2]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "features_parameters_parameter",
				Columns:    []*schema.Column{FeaturesColumns[3]},
				RefColumns: []*schema.Column{ParametersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "feature_product_id_parameter_id",
				Unique:  true,
				Columns: []*schema.Column{FeaturesColumns[2], FeaturesColumns[3]},
			},
		},
	}
	// ParametersColumns holds the columns for the "parameters" table.
	ParametersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: ""},
	}
	// ParametersTable holds the schema information for the "parameters" table.
	ParametersTable = &schema.Table{
		Name:       "parameters",
		Columns:    ParametersColumns,
		PrimaryKey: []*schema.Column{ParametersColumns[0]},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: ""},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
	}
	// SegmentsColumns holds the columns for the "segments" table.
	SegmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "number", Type: field.TypeFloat64},
		{Name: "text", Type: field.TypeString, Size: 2147483647},
		{Name: "article_segments", Type: field.TypeInt},
	}
	// SegmentsTable holds the schema information for the "segments" table.
	SegmentsTable = &schema.Table{
		Name:       "segments",
		Columns:    SegmentsColumns,
		PrimaryKey: []*schema.Column{SegmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "segments_articles_segments",
				Columns:    []*schema.Column{SegmentsColumns[3]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SegmentFeaturesColumns holds the columns for the "segment_features" table.
	SegmentFeaturesColumns = []*schema.Column{
		{Name: "segment_id", Type: field.TypeInt},
		{Name: "feature_id", Type: field.TypeInt},
	}
	// SegmentFeaturesTable holds the schema information for the "segment_features" table.
	SegmentFeaturesTable = &schema.Table{
		Name:       "segment_features",
		Columns:    SegmentFeaturesColumns,
		PrimaryKey: []*schema.Column{SegmentFeaturesColumns[0], SegmentFeaturesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "segment_features_segment_id",
				Columns:    []*schema.Column{SegmentFeaturesColumns[0]},
				RefColumns: []*schema.Column{SegmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "segment_features_feature_id",
				Columns:    []*schema.Column{SegmentFeaturesColumns[1]},
				RefColumns: []*schema.Column{FeaturesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArticlesTable,
		DocumentsTable,
		FeaturesTable,
		ParametersTable,
		ProductsTable,
		SegmentsTable,
		SegmentFeaturesTable,
	}
)

func init() {
	ArticlesTable.ForeignKeys[0].RefTable = DocumentsTable
	FeaturesTable.ForeignKeys[0].RefTable = ProductsTable
	FeaturesTable.ForeignKeys[1].RefTable = ParametersTable
	SegmentsTable.ForeignKeys[0].RefTable = ArticlesTable
	SegmentFeaturesTable.ForeignKeys[0].RefTable = SegmentsTable
	SegmentFeaturesTable.ForeignKeys[1].RefTable = FeaturesTable
}
