// Code generated by ent, DO NOT EDIT.

package ent

import (
	"guide/ent/article"
	"guide/ent/feature"
	"guide/ent/parameter"
	"guide/ent/product"
	"guide/ent/schema"
	"guide/ent/segment"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescNumber is the schema descriptor for number field.
	articleDescNumber := articleFields[0].Descriptor()
	// article.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	article.NumberValidator = articleDescNumber.Validators[0].(func(float64) error)
	featureFields := schema.Feature{}.Fields()
	_ = featureFields
	// featureDescCreatedAt is the schema descriptor for created_at field.
	featureDescCreatedAt := featureFields[0].Descriptor()
	// feature.DefaultCreatedAt holds the default value on creation for the created_at field.
	feature.DefaultCreatedAt = featureDescCreatedAt.Default.(func() time.Time)
	parameterFields := schema.Parameter{}.Fields()
	_ = parameterFields
	// parameterDescName is the schema descriptor for name field.
	parameterDescName := parameterFields[0].Descriptor()
	// parameter.DefaultName holds the default value on creation for the name field.
	parameter.DefaultName = parameterDescName.Default.(string)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescName is the schema descriptor for name field.
	productDescName := productFields[0].Descriptor()
	// product.DefaultName holds the default value on creation for the name field.
	product.DefaultName = productDescName.Default.(string)
	segmentFields := schema.Segment{}.Fields()
	_ = segmentFields
	// segmentDescNumber is the schema descriptor for number field.
	segmentDescNumber := segmentFields[0].Descriptor()
	// segment.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	segment.NumberValidator = segmentDescNumber.Validators[0].(func(float64) error)
}
