// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"guide/ent/feature"
	"guide/ent/parameter"
	"guide/ent/predicate"
	"guide/ent/product"
	"guide/ent/segment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// Where appends a list predicates to the FeatureUpdate builder.
func (fu *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetCreatedAt sets the "created_at" field.
func (fu *FeatureUpdate) SetCreatedAt(t time.Time) *FeatureUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableCreatedAt(t *time.Time) *FeatureUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetProductID sets the "product_id" field.
func (fu *FeatureUpdate) SetProductID(i int) *FeatureUpdate {
	fu.mutation.SetProductID(i)
	return fu
}

// SetParameterID sets the "parameter_id" field.
func (fu *FeatureUpdate) SetParameterID(i int) *FeatureUpdate {
	fu.mutation.SetParameterID(i)
	return fu
}

// SetProduct sets the "product" edge to the Product entity.
func (fu *FeatureUpdate) SetProduct(p *Product) *FeatureUpdate {
	return fu.SetProductID(p.ID)
}

// SetParameter sets the "parameter" edge to the Parameter entity.
func (fu *FeatureUpdate) SetParameter(p *Parameter) *FeatureUpdate {
	return fu.SetParameterID(p.ID)
}

// AddSegmentIDs adds the "segments" edge to the Segment entity by IDs.
func (fu *FeatureUpdate) AddSegmentIDs(ids ...int) *FeatureUpdate {
	fu.mutation.AddSegmentIDs(ids...)
	return fu
}

// AddSegments adds the "segments" edges to the Segment entity.
func (fu *FeatureUpdate) AddSegments(s ...*Segment) *FeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddSegmentIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fu *FeatureUpdate) Mutation() *FeatureMutation {
	return fu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (fu *FeatureUpdate) ClearProduct() *FeatureUpdate {
	fu.mutation.ClearProduct()
	return fu
}

// ClearParameter clears the "parameter" edge to the Parameter entity.
func (fu *FeatureUpdate) ClearParameter() *FeatureUpdate {
	fu.mutation.ClearParameter()
	return fu
}

// ClearSegments clears all "segments" edges to the Segment entity.
func (fu *FeatureUpdate) ClearSegments() *FeatureUpdate {
	fu.mutation.ClearSegments()
	return fu
}

// RemoveSegmentIDs removes the "segments" edge to Segment entities by IDs.
func (fu *FeatureUpdate) RemoveSegmentIDs(ids ...int) *FeatureUpdate {
	fu.mutation.RemoveSegmentIDs(ids...)
	return fu
}

// RemoveSegments removes "segments" edges to Segment entities.
func (fu *FeatureUpdate) RemoveSegments(s ...*Segment) *FeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveSegmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FeatureUpdate) check() error {
	if _, ok := fu.mutation.ProductID(); fu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Feature.product"`)
	}
	if _, ok := fu.mutation.ParameterID(); fu.mutation.ParameterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Feature.parameter"`)
	}
	return nil
}

func (fu *FeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feature.Table,
			Columns: feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feature.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feature.FieldCreatedAt,
		})
	}
	if fu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ProductTable,
			Columns: []string{feature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ProductTable,
			Columns: []string{feature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ParameterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ParameterTable,
			Columns: []string{feature.ParameterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ParameterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ParameterTable,
			Columns: []string{feature.ParameterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.SegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedSegmentsIDs(); len(nodes) > 0 && !fu.mutation.SegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SegmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureMutation
}

// SetCreatedAt sets the "created_at" field.
func (fuo *FeatureUpdateOne) SetCreatedAt(t time.Time) *FeatureUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableCreatedAt(t *time.Time) *FeatureUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetProductID sets the "product_id" field.
func (fuo *FeatureUpdateOne) SetProductID(i int) *FeatureUpdateOne {
	fuo.mutation.SetProductID(i)
	return fuo
}

// SetParameterID sets the "parameter_id" field.
func (fuo *FeatureUpdateOne) SetParameterID(i int) *FeatureUpdateOne {
	fuo.mutation.SetParameterID(i)
	return fuo
}

// SetProduct sets the "product" edge to the Product entity.
func (fuo *FeatureUpdateOne) SetProduct(p *Product) *FeatureUpdateOne {
	return fuo.SetProductID(p.ID)
}

// SetParameter sets the "parameter" edge to the Parameter entity.
func (fuo *FeatureUpdateOne) SetParameter(p *Parameter) *FeatureUpdateOne {
	return fuo.SetParameterID(p.ID)
}

// AddSegmentIDs adds the "segments" edge to the Segment entity by IDs.
func (fuo *FeatureUpdateOne) AddSegmentIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.AddSegmentIDs(ids...)
	return fuo
}

// AddSegments adds the "segments" edges to the Segment entity.
func (fuo *FeatureUpdateOne) AddSegments(s ...*Segment) *FeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddSegmentIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fuo *FeatureUpdateOne) Mutation() *FeatureMutation {
	return fuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (fuo *FeatureUpdateOne) ClearProduct() *FeatureUpdateOne {
	fuo.mutation.ClearProduct()
	return fuo
}

// ClearParameter clears the "parameter" edge to the Parameter entity.
func (fuo *FeatureUpdateOne) ClearParameter() *FeatureUpdateOne {
	fuo.mutation.ClearParameter()
	return fuo
}

// ClearSegments clears all "segments" edges to the Segment entity.
func (fuo *FeatureUpdateOne) ClearSegments() *FeatureUpdateOne {
	fuo.mutation.ClearSegments()
	return fuo
}

// RemoveSegmentIDs removes the "segments" edge to Segment entities by IDs.
func (fuo *FeatureUpdateOne) RemoveSegmentIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.RemoveSegmentIDs(ids...)
	return fuo
}

// RemoveSegments removes "segments" edges to Segment entities.
func (fuo *FeatureUpdateOne) RemoveSegments(s ...*Segment) *FeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveSegmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeatureUpdateOne) Select(field string, fields ...string) *FeatureUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feature entity.
func (fuo *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	var (
		err  error
		node *Feature
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Feature)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeatureMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FeatureUpdateOne) check() error {
	if _, ok := fuo.mutation.ProductID(); fuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Feature.product"`)
	}
	if _, ok := fuo.mutation.ParameterID(); fuo.mutation.ParameterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Feature.parameter"`)
	}
	return nil
}

func (fuo *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feature.Table,
			Columns: feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feature.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for _, f := range fields {
			if !feature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feature.FieldCreatedAt,
		})
	}
	if fuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ProductTable,
			Columns: []string{feature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ProductTable,
			Columns: []string{feature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ParameterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ParameterTable,
			Columns: []string{feature.ParameterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ParameterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feature.ParameterTable,
			Columns: []string{feature.ParameterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.SegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedSegmentsIDs(); len(nodes) > 0 && !fuo.mutation.SegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SegmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.SegmentsTable,
			Columns: feature.SegmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: segment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Feature{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
