// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"guide/ent/product"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// FeaturedParameters holds the value of the featured_parameters edge.
	FeaturedParameters []*Parameter `json:"featured_parameters,omitempty"`
	// Features holds the value of the features edge.
	Features []*Feature `json:"features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeaturedParametersOrErr returns the FeaturedParameters value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) FeaturedParametersOrErr() ([]*Parameter, error) {
	if e.loadedTypes[0] {
		return e.FeaturedParameters, nil
	}
	return nil, &NotLoadedError{edge: "featured_parameters"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) FeaturesOrErr() ([]*Feature, error) {
	if e.loadedTypes[1] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			values[i] = new(sql.NullInt64)
		case product.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		}
	}
	return nil
}

// QueryFeaturedParameters queries the "featured_parameters" edge of the Product entity.
func (pr *Product) QueryFeaturedParameters() *ParameterQuery {
	return (&ProductClient{config: pr.config}).QueryFeaturedParameters(pr)
}

// QueryFeatures queries the "features" edge of the Product entity.
func (pr *Product) QueryFeatures() *FeatureQuery {
	return (&ProductClient{config: pr.config}).QueryFeatures(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
