// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"guide/ent/article"
	"guide/ent/feature"
	"guide/ent/segment"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SegmentCreate is the builder for creating a Segment entity.
type SegmentCreate struct {
	config
	mutation *SegmentMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (sc *SegmentCreate) SetNumber(f float64) *SegmentCreate {
	sc.mutation.SetNumber(f)
	return sc
}

// SetText sets the "text" field.
func (sc *SegmentCreate) SetText(s string) *SegmentCreate {
	sc.mutation.SetText(s)
	return sc
}

// SetOwnerID sets the "owner" edge to the Article entity by ID.
func (sc *SegmentCreate) SetOwnerID(id int) *SegmentCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the Article entity.
func (sc *SegmentCreate) SetOwner(a *Article) *SegmentCreate {
	return sc.SetOwnerID(a.ID)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (sc *SegmentCreate) AddFeatureIDs(ids ...int) *SegmentCreate {
	sc.mutation.AddFeatureIDs(ids...)
	return sc
}

// AddFeatures adds the "features" edges to the Feature entity.
func (sc *SegmentCreate) AddFeatures(f ...*Feature) *SegmentCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return sc.AddFeatureIDs(ids...)
}

// Mutation returns the SegmentMutation object of the builder.
func (sc *SegmentCreate) Mutation() *SegmentMutation {
	return sc.mutation
}

// Save creates the Segment in the database.
func (sc *SegmentCreate) Save(ctx context.Context) (*Segment, error) {
	var (
		err  error
		node *Segment
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SegmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Segment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SegmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SegmentCreate) SaveX(ctx context.Context) *Segment {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SegmentCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SegmentCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SegmentCreate) check() error {
	if _, ok := sc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Segment.number"`)}
	}
	if v, ok := sc.mutation.Number(); ok {
		if err := segment.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Segment.number": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Segment.text"`)}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Segment.owner"`)}
	}
	return nil
}

func (sc *SegmentCreate) sqlSave(ctx context.Context) (*Segment, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SegmentCreate) createSpec() (*Segment, *sqlgraph.CreateSpec) {
	var (
		_node = &Segment{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: segment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: segment.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := sc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: segment.FieldText,
		})
		_node.Text = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   segment.OwnerTable,
			Columns: []string{segment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.article_segments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   segment.FeaturesTable,
			Columns: segment.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SegmentCreateBulk is the builder for creating many Segment entities in bulk.
type SegmentCreateBulk struct {
	config
	builders []*SegmentCreate
}

// Save creates the Segment entities in the database.
func (scb *SegmentCreateBulk) Save(ctx context.Context) ([]*Segment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Segment, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SegmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SegmentCreateBulk) SaveX(ctx context.Context) []*Segment {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SegmentCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SegmentCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
