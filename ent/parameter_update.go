// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"guide/ent/feature"
	"guide/ent/parameter"
	"guide/ent/predicate"
	"guide/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParameterUpdate is the builder for updating Parameter entities.
type ParameterUpdate struct {
	config
	hooks    []Hook
	mutation *ParameterMutation
}

// Where appends a list predicates to the ParameterUpdate builder.
func (pu *ParameterUpdate) Where(ps ...predicate.Parameter) *ParameterUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ParameterUpdate) SetName(s string) *ParameterUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ParameterUpdate) SetNillableName(s *string) *ParameterUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// AddFeaturedProductIDs adds the "featured_products" edge to the Product entity by IDs.
func (pu *ParameterUpdate) AddFeaturedProductIDs(ids ...int) *ParameterUpdate {
	pu.mutation.AddFeaturedProductIDs(ids...)
	return pu
}

// AddFeaturedProducts adds the "featured_products" edges to the Product entity.
func (pu *ParameterUpdate) AddFeaturedProducts(p ...*Product) *ParameterUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddFeaturedProductIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (pu *ParameterUpdate) AddFeatureIDs(ids ...int) *ParameterUpdate {
	pu.mutation.AddFeatureIDs(ids...)
	return pu
}

// AddFeatures adds the "features" edges to the Feature entity.
func (pu *ParameterUpdate) AddFeatures(f ...*Feature) *ParameterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFeatureIDs(ids...)
}

// Mutation returns the ParameterMutation object of the builder.
func (pu *ParameterUpdate) Mutation() *ParameterMutation {
	return pu.mutation
}

// ClearFeaturedProducts clears all "featured_products" edges to the Product entity.
func (pu *ParameterUpdate) ClearFeaturedProducts() *ParameterUpdate {
	pu.mutation.ClearFeaturedProducts()
	return pu
}

// RemoveFeaturedProductIDs removes the "featured_products" edge to Product entities by IDs.
func (pu *ParameterUpdate) RemoveFeaturedProductIDs(ids ...int) *ParameterUpdate {
	pu.mutation.RemoveFeaturedProductIDs(ids...)
	return pu
}

// RemoveFeaturedProducts removes "featured_products" edges to Product entities.
func (pu *ParameterUpdate) RemoveFeaturedProducts(p ...*Product) *ParameterUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveFeaturedProductIDs(ids...)
}

// ClearFeatures clears all "features" edges to the Feature entity.
func (pu *ParameterUpdate) ClearFeatures() *ParameterUpdate {
	pu.mutation.ClearFeatures()
	return pu
}

// RemoveFeatureIDs removes the "features" edge to Feature entities by IDs.
func (pu *ParameterUpdate) RemoveFeatureIDs(ids ...int) *ParameterUpdate {
	pu.mutation.RemoveFeatureIDs(ids...)
	return pu
}

// RemoveFeatures removes "features" edges to Feature entities.
func (pu *ParameterUpdate) RemoveFeatures(f ...*Feature) *ParameterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ParameterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParameterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParameterUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParameterUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParameterUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ParameterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   parameter.Table,
			Columns: parameter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: parameter.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: parameter.FieldName,
		})
	}
	if pu.mutation.FeaturedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		createE := &FeatureCreate{config: pu.config, mutation: newFeatureMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFeaturedProductsIDs(); len(nodes) > 0 && !pu.mutation.FeaturedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeatureCreate{config: pu.config, mutation: newFeatureMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeaturedProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeatureCreate{config: pu.config, mutation: newFeatureMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !pu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ParameterUpdateOne is the builder for updating a single Parameter entity.
type ParameterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParameterMutation
}

// SetName sets the "name" field.
func (puo *ParameterUpdateOne) SetName(s string) *ParameterUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ParameterUpdateOne) SetNillableName(s *string) *ParameterUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// AddFeaturedProductIDs adds the "featured_products" edge to the Product entity by IDs.
func (puo *ParameterUpdateOne) AddFeaturedProductIDs(ids ...int) *ParameterUpdateOne {
	puo.mutation.AddFeaturedProductIDs(ids...)
	return puo
}

// AddFeaturedProducts adds the "featured_products" edges to the Product entity.
func (puo *ParameterUpdateOne) AddFeaturedProducts(p ...*Product) *ParameterUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddFeaturedProductIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (puo *ParameterUpdateOne) AddFeatureIDs(ids ...int) *ParameterUpdateOne {
	puo.mutation.AddFeatureIDs(ids...)
	return puo
}

// AddFeatures adds the "features" edges to the Feature entity.
func (puo *ParameterUpdateOne) AddFeatures(f ...*Feature) *ParameterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFeatureIDs(ids...)
}

// Mutation returns the ParameterMutation object of the builder.
func (puo *ParameterUpdateOne) Mutation() *ParameterMutation {
	return puo.mutation
}

// ClearFeaturedProducts clears all "featured_products" edges to the Product entity.
func (puo *ParameterUpdateOne) ClearFeaturedProducts() *ParameterUpdateOne {
	puo.mutation.ClearFeaturedProducts()
	return puo
}

// RemoveFeaturedProductIDs removes the "featured_products" edge to Product entities by IDs.
func (puo *ParameterUpdateOne) RemoveFeaturedProductIDs(ids ...int) *ParameterUpdateOne {
	puo.mutation.RemoveFeaturedProductIDs(ids...)
	return puo
}

// RemoveFeaturedProducts removes "featured_products" edges to Product entities.
func (puo *ParameterUpdateOne) RemoveFeaturedProducts(p ...*Product) *ParameterUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveFeaturedProductIDs(ids...)
}

// ClearFeatures clears all "features" edges to the Feature entity.
func (puo *ParameterUpdateOne) ClearFeatures() *ParameterUpdateOne {
	puo.mutation.ClearFeatures()
	return puo
}

// RemoveFeatureIDs removes the "features" edge to Feature entities by IDs.
func (puo *ParameterUpdateOne) RemoveFeatureIDs(ids ...int) *ParameterUpdateOne {
	puo.mutation.RemoveFeatureIDs(ids...)
	return puo
}

// RemoveFeatures removes "features" edges to Feature entities.
func (puo *ParameterUpdateOne) RemoveFeatures(f ...*Feature) *ParameterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFeatureIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ParameterUpdateOne) Select(field string, fields ...string) *ParameterUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Parameter entity.
func (puo *ParameterUpdateOne) Save(ctx context.Context) (*Parameter, error) {
	var (
		err  error
		node *Parameter
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParameterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Parameter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ParameterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParameterUpdateOne) SaveX(ctx context.Context) *Parameter {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ParameterUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParameterUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ParameterUpdateOne) sqlSave(ctx context.Context) (_node *Parameter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   parameter.Table,
			Columns: parameter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: parameter.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Parameter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parameter.FieldID)
		for _, f := range fields {
			if !parameter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parameter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: parameter.FieldName,
		})
	}
	if puo.mutation.FeaturedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		createE := &FeatureCreate{config: puo.config, mutation: newFeatureMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFeaturedProductsIDs(); len(nodes) > 0 && !puo.mutation.FeaturedProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeatureCreate{config: puo.config, mutation: newFeatureMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeaturedProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   parameter.FeaturedProductsTable,
			Columns: parameter.FeaturedProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FeatureCreate{config: puo.config, mutation: newFeatureMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !puo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parameter.FeaturesTable,
			Columns: []string{parameter.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feature.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Parameter{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
