// Code generated by ent, DO NOT EDIT.

package segment

const (
	// Label holds the string label denoting the segment type in the database.
	Label = "segment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeFeatures holds the string denoting the features edge name in mutations.
	EdgeFeatures = "features"
	// Table holds the table name of the segment in the database.
	Table = "segments"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "segments"
	// OwnerInverseTable is the table name for the Article entity.
	// It exists in this package in order to avoid circular dependency with the "article" package.
	OwnerInverseTable = "articles"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "article_segments"
	// FeaturesTable is the table that holds the features relation/edge. The primary key declared below.
	FeaturesTable = "segment_features"
	// FeaturesInverseTable is the table name for the Feature entity.
	// It exists in this package in order to avoid circular dependency with the "feature" package.
	FeaturesInverseTable = "features"
)

// Columns holds all SQL columns for segment fields.
var Columns = []string{
	FieldID,
	FieldNumber,
	FieldText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "segments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"article_segments",
}

var (
	// FeaturesPrimaryKey and FeaturesColumn2 are the table columns denoting the
	// primary key for the features relation (M2M).
	FeaturesPrimaryKey = []string{"segment_id", "feature_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(float64) error
)
