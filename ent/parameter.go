// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"guide/ent/parameter"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Parameter is the model entity for the Parameter schema.
type Parameter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParameterQuery when eager-loading is set.
	Edges ParameterEdges `json:"edges"`
}

// ParameterEdges holds the relations/edges for other nodes in the graph.
type ParameterEdges struct {
	// FeaturedProducts holds the value of the featured_products edge.
	FeaturedProducts []*Product `json:"featured_products,omitempty"`
	// Features holds the value of the features edge.
	Features []*Feature `json:"features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FeaturedProductsOrErr returns the FeaturedProducts value or an error if the edge
// was not loaded in eager-loading.
func (e ParameterEdges) FeaturedProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[0] {
		return e.FeaturedProducts, nil
	}
	return nil, &NotLoadedError{edge: "featured_products"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e ParameterEdges) FeaturesOrErr() ([]*Feature, error) {
	if e.loadedTypes[1] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Parameter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case parameter.FieldID:
			values[i] = new(sql.NullInt64)
		case parameter.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Parameter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Parameter fields.
func (pa *Parameter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parameter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case parameter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		}
	}
	return nil
}

// QueryFeaturedProducts queries the "featured_products" edge of the Parameter entity.
func (pa *Parameter) QueryFeaturedProducts() *ProductQuery {
	return (&ParameterClient{config: pa.config}).QueryFeaturedProducts(pa)
}

// QueryFeatures queries the "features" edge of the Parameter entity.
func (pa *Parameter) QueryFeatures() *FeatureQuery {
	return (&ParameterClient{config: pa.config}).QueryFeatures(pa)
}

// Update returns a builder for updating this Parameter.
// Note that you need to call Parameter.Unwrap() before calling this method if this Parameter
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Parameter) Update() *ParameterUpdateOne {
	return (&ParameterClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Parameter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Parameter) Unwrap() *Parameter {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Parameter is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Parameter) String() string {
	var builder strings.Builder
	builder.WriteString("Parameter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Parameters is a parsable slice of Parameter.
type Parameters []*Parameter

func (pa Parameters) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
