// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"guide/ent/article"
	"guide/ent/document"
	"guide/ent/feature"
	"guide/ent/parameter"
	"guide/ent/predicate"
	"guide/ent/product"
	"guide/ent/segment"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle   = "Article"
	TypeDocument  = "Document"
	TypeFeature   = "Feature"
	TypeParameter = "Parameter"
	TypeProduct   = "Product"
	TypeSegment   = "Segment"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	number          *float64
	addnumber       *float64
	clearedFields   map[string]struct{}
	segments        map[int]struct{}
	removedsegments map[int]struct{}
	clearedsegments bool
	owner           *int
	clearedowner    bool
	done            bool
	oldValue        func(context.Context) (*Article, error)
	predicates      []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *ArticleMutation) SetNumber(f float64) {
	m.number = &f
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *ArticleMutation) Number() (r float64, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldNumber(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds f to the "number" field.
func (m *ArticleMutation) AddNumber(f float64) {
	if m.addnumber != nil {
		*m.addnumber += f
	} else {
		m.addnumber = &f
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *ArticleMutation) AddedNumber() (r float64, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *ArticleMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// AddSegmentIDs adds the "segments" edge to the Segment entity by ids.
func (m *ArticleMutation) AddSegmentIDs(ids ...int) {
	if m.segments == nil {
		m.segments = make(map[int]struct{})
	}
	for i := range ids {
		m.segments[ids[i]] = struct{}{}
	}
}

// ClearSegments clears the "segments" edge to the Segment entity.
func (m *ArticleMutation) ClearSegments() {
	m.clearedsegments = true
}

// SegmentsCleared reports if the "segments" edge to the Segment entity was cleared.
func (m *ArticleMutation) SegmentsCleared() bool {
	return m.clearedsegments
}

// RemoveSegmentIDs removes the "segments" edge to the Segment entity by IDs.
func (m *ArticleMutation) RemoveSegmentIDs(ids ...int) {
	if m.removedsegments == nil {
		m.removedsegments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.segments, ids[i])
		m.removedsegments[ids[i]] = struct{}{}
	}
}

// RemovedSegments returns the removed IDs of the "segments" edge to the Segment entity.
func (m *ArticleMutation) RemovedSegmentsIDs() (ids []int) {
	for id := range m.removedsegments {
		ids = append(ids, id)
	}
	return
}

// SegmentsIDs returns the "segments" edge IDs in the mutation.
func (m *ArticleMutation) SegmentsIDs() (ids []int) {
	for id := range m.segments {
		ids = append(ids, id)
	}
	return
}

// ResetSegments resets all changes to the "segments" edge.
func (m *ArticleMutation) ResetSegments() {
	m.segments = nil
	m.clearedsegments = false
	m.removedsegments = nil
}

// SetOwnerID sets the "owner" edge to the Document entity by id.
func (m *ArticleMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Document entity.
func (m *ArticleMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Document entity was cleared.
func (m *ArticleMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ArticleMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ArticleMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.number != nil {
		fields = append(fields, article.FieldNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldNumber:
		return m.Number()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldNumber:
		return m.OldNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldNumber:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, article.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case article.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case article.FieldNumber:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldNumber:
		m.ResetNumber()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.segments != nil {
		edges = append(edges, article.EdgeSegments)
	}
	if m.owner != nil {
		edges = append(edges, article.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.segments))
		for id := range m.segments {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsegments != nil {
		edges = append(edges, article.EdgeSegments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.removedsegments))
		for id := range m.removedsegments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsegments {
		edges = append(edges, article.EdgeSegments)
	}
	if m.clearedowner {
		edges = append(edges, article.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeSegments:
		return m.clearedsegments
	case article.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeSegments:
		m.ResetSegments()
		return nil
	case article.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// DocumentMutation represents an operation that mutates the Document nodes in the graph.
type DocumentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	date            *time.Time
	description     *string
	clearedFields   map[string]struct{}
	articles        map[int]struct{}
	removedarticles map[int]struct{}
	clearedarticles bool
	done            bool
	oldValue        func(context.Context) (*Document, error)
	predicates      []predicate.Document
}

var _ ent.Mutation = (*DocumentMutation)(nil)

// documentOption allows management of the mutation configuration using functional options.
type documentOption func(*DocumentMutation)

// newDocumentMutation creates new mutation for the Document entity.
func newDocumentMutation(c config, op Op, opts ...documentOption) *DocumentMutation {
	m := &DocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDocumentID sets the ID field of the mutation.
func withDocumentID(id int) documentOption {
	return func(m *DocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *Document
		)
		m.oldValue = func(ctx context.Context) (*Document, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Document.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDocument sets the old Document of the mutation.
func withDocument(node *Document) documentOption {
	return func(m *DocumentMutation) {
		m.oldValue = func(context.Context) (*Document, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Document.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DocumentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DocumentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DocumentMutation) ResetName() {
	m.name = nil
}

// SetDate sets the "date" field.
func (m *DocumentMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DocumentMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DocumentMutation) ResetDate() {
	m.date = nil
}

// SetDescription sets the "description" field.
func (m *DocumentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DocumentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Document entity.
// If the Document object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DocumentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DocumentMutation) ResetDescription() {
	m.description = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *DocumentMutation) AddArticleIDs(ids ...int) {
	if m.articles == nil {
		m.articles = make(map[int]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *DocumentMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *DocumentMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *DocumentMutation) RemoveArticleIDs(ids ...int) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.articles, ids[i])
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *DocumentMutation) RemovedArticlesIDs() (ids []int) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *DocumentMutation) ArticlesIDs() (ids []int) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *DocumentMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// Where appends a list predicates to the DocumentMutation builder.
func (m *DocumentMutation) Where(ps ...predicate.Document) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DocumentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Document).
func (m *DocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DocumentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, document.FieldName)
	}
	if m.date != nil {
		fields = append(fields, document.FieldDate)
	}
	if m.description != nil {
		fields = append(fields, document.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DocumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case document.FieldName:
		return m.Name()
	case document.FieldDate:
		return m.Date()
	case document.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case document.FieldName:
		return m.OldName(ctx)
	case document.FieldDate:
		return m.OldDate(ctx)
	case document.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Document field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case document.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case document.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case document.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DocumentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DocumentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DocumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Document numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DocumentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DocumentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Document nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DocumentMutation) ResetField(name string) error {
	switch name {
	case document.FieldName:
		m.ResetName()
		return nil
	case document.FieldDate:
		m.ResetDate()
		return nil
	case document.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Document field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.articles != nil {
		edges = append(edges, document.EdgeArticles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DocumentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case document.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarticles != nil {
		edges = append(edges, document.EdgeArticles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DocumentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case document.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedarticles {
		edges = append(edges, document.EdgeArticles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DocumentMutation) EdgeCleared(name string) bool {
	switch name {
	case document.EdgeArticles:
		return m.clearedarticles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DocumentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Document unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DocumentMutation) ResetEdge(name string) error {
	switch name {
	case document.EdgeArticles:
		m.ResetArticles()
		return nil
	}
	return fmt.Errorf("unknown Document edge %s", name)
}

// FeatureMutation represents an operation that mutates the Feature nodes in the graph.
type FeatureMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	clearedFields    map[string]struct{}
	product          *int
	clearedproduct   bool
	parameter        *int
	clearedparameter bool
	segments         map[int]struct{}
	removedsegments  map[int]struct{}
	clearedsegments  bool
	done             bool
	oldValue         func(context.Context) (*Feature, error)
	predicates       []predicate.Feature
}

var _ ent.Mutation = (*FeatureMutation)(nil)

// featureOption allows management of the mutation configuration using functional options.
type featureOption func(*FeatureMutation)

// newFeatureMutation creates new mutation for the Feature entity.
func newFeatureMutation(c config, op Op, opts ...featureOption) *FeatureMutation {
	m := &FeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeFeature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeatureID sets the ID field of the mutation.
func withFeatureID(id int) featureOption {
	return func(m *FeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *Feature
		)
		m.oldValue = func(ctx context.Context) (*Feature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Feature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeature sets the old Feature of the mutation.
func withFeature(node *Feature) featureOption {
	return func(m *FeatureMutation) {
		m.oldValue = func(context.Context) (*Feature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FeatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Feature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetProductID sets the "product_id" field.
func (m *FeatureMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *FeatureMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *FeatureMutation) ResetProductID() {
	m.product = nil
}

// SetParameterID sets the "parameter_id" field.
func (m *FeatureMutation) SetParameterID(i int) {
	m.parameter = &i
}

// ParameterID returns the value of the "parameter_id" field in the mutation.
func (m *FeatureMutation) ParameterID() (r int, exists bool) {
	v := m.parameter
	if v == nil {
		return
	}
	return *v, true
}

// OldParameterID returns the old "parameter_id" field's value of the Feature entity.
// If the Feature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeatureMutation) OldParameterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParameterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParameterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParameterID: %w", err)
	}
	return oldValue.ParameterID, nil
}

// ResetParameterID resets all changes to the "parameter_id" field.
func (m *FeatureMutation) ResetParameterID() {
	m.parameter = nil
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *FeatureMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *FeatureMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *FeatureMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *FeatureMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// ClearParameter clears the "parameter" edge to the Parameter entity.
func (m *FeatureMutation) ClearParameter() {
	m.clearedparameter = true
}

// ParameterCleared reports if the "parameter" edge to the Parameter entity was cleared.
func (m *FeatureMutation) ParameterCleared() bool {
	return m.clearedparameter
}

// ParameterIDs returns the "parameter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParameterID instead. It exists only for internal usage by the builders.
func (m *FeatureMutation) ParameterIDs() (ids []int) {
	if id := m.parameter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParameter resets all changes to the "parameter" edge.
func (m *FeatureMutation) ResetParameter() {
	m.parameter = nil
	m.clearedparameter = false
}

// AddSegmentIDs adds the "segments" edge to the Segment entity by ids.
func (m *FeatureMutation) AddSegmentIDs(ids ...int) {
	if m.segments == nil {
		m.segments = make(map[int]struct{})
	}
	for i := range ids {
		m.segments[ids[i]] = struct{}{}
	}
}

// ClearSegments clears the "segments" edge to the Segment entity.
func (m *FeatureMutation) ClearSegments() {
	m.clearedsegments = true
}

// SegmentsCleared reports if the "segments" edge to the Segment entity was cleared.
func (m *FeatureMutation) SegmentsCleared() bool {
	return m.clearedsegments
}

// RemoveSegmentIDs removes the "segments" edge to the Segment entity by IDs.
func (m *FeatureMutation) RemoveSegmentIDs(ids ...int) {
	if m.removedsegments == nil {
		m.removedsegments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.segments, ids[i])
		m.removedsegments[ids[i]] = struct{}{}
	}
}

// RemovedSegments returns the removed IDs of the "segments" edge to the Segment entity.
func (m *FeatureMutation) RemovedSegmentsIDs() (ids []int) {
	for id := range m.removedsegments {
		ids = append(ids, id)
	}
	return
}

// SegmentsIDs returns the "segments" edge IDs in the mutation.
func (m *FeatureMutation) SegmentsIDs() (ids []int) {
	for id := range m.segments {
		ids = append(ids, id)
	}
	return
}

// ResetSegments resets all changes to the "segments" edge.
func (m *FeatureMutation) ResetSegments() {
	m.segments = nil
	m.clearedsegments = false
	m.removedsegments = nil
}

// Where appends a list predicates to the FeatureMutation builder.
func (m *FeatureMutation) Where(ps ...predicate.Feature) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FeatureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Feature).
func (m *FeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeatureMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, feature.FieldCreatedAt)
	}
	if m.product != nil {
		fields = append(fields, feature.FieldProductID)
	}
	if m.parameter != nil {
		fields = append(fields, feature.FieldParameterID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feature.FieldCreatedAt:
		return m.CreatedAt()
	case feature.FieldProductID:
		return m.ProductID()
	case feature.FieldParameterID:
		return m.ParameterID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case feature.FieldProductID:
		return m.OldProductID(ctx)
	case feature.FieldParameterID:
		return m.OldParameterID(ctx)
	}
	return nil, fmt.Errorf("unknown Feature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case feature.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case feature.FieldParameterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParameterID(v)
		return nil
	}
	return fmt.Errorf("unknown Feature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeatureMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Feature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Feature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeatureMutation) ResetField(name string) error {
	switch name {
	case feature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case feature.FieldProductID:
		m.ResetProductID()
		return nil
	case feature.FieldParameterID:
		m.ResetParameterID()
		return nil
	}
	return fmt.Errorf("unknown Feature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.product != nil {
		edges = append(edges, feature.EdgeProduct)
	}
	if m.parameter != nil {
		edges = append(edges, feature.EdgeParameter)
	}
	if m.segments != nil {
		edges = append(edges, feature.EdgeSegments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeatureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case feature.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case feature.EdgeParameter:
		if id := m.parameter; id != nil {
			return []ent.Value{*id}
		}
	case feature.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.segments))
		for id := range m.segments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsegments != nil {
		edges = append(edges, feature.EdgeSegments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeatureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case feature.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.removedsegments))
		for id := range m.removedsegments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproduct {
		edges = append(edges, feature.EdgeProduct)
	}
	if m.clearedparameter {
		edges = append(edges, feature.EdgeParameter)
	}
	if m.clearedsegments {
		edges = append(edges, feature.EdgeSegments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeatureMutation) EdgeCleared(name string) bool {
	switch name {
	case feature.EdgeProduct:
		return m.clearedproduct
	case feature.EdgeParameter:
		return m.clearedparameter
	case feature.EdgeSegments:
		return m.clearedsegments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeatureMutation) ClearEdge(name string) error {
	switch name {
	case feature.EdgeProduct:
		m.ClearProduct()
		return nil
	case feature.EdgeParameter:
		m.ClearParameter()
		return nil
	}
	return fmt.Errorf("unknown Feature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeatureMutation) ResetEdge(name string) error {
	switch name {
	case feature.EdgeProduct:
		m.ResetProduct()
		return nil
	case feature.EdgeParameter:
		m.ResetParameter()
		return nil
	case feature.EdgeSegments:
		m.ResetSegments()
		return nil
	}
	return fmt.Errorf("unknown Feature edge %s", name)
}

// ParameterMutation represents an operation that mutates the Parameter nodes in the graph.
type ParameterMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	name                     *string
	clearedFields            map[string]struct{}
	featured_products        map[int]struct{}
	removedfeatured_products map[int]struct{}
	clearedfeatured_products bool
	features                 map[int]struct{}
	removedfeatures          map[int]struct{}
	clearedfeatures          bool
	done                     bool
	oldValue                 func(context.Context) (*Parameter, error)
	predicates               []predicate.Parameter
}

var _ ent.Mutation = (*ParameterMutation)(nil)

// parameterOption allows management of the mutation configuration using functional options.
type parameterOption func(*ParameterMutation)

// newParameterMutation creates new mutation for the Parameter entity.
func newParameterMutation(c config, op Op, opts ...parameterOption) *ParameterMutation {
	m := &ParameterMutation{
		config:        c,
		op:            op,
		typ:           TypeParameter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withParameterID sets the ID field of the mutation.
func withParameterID(id int) parameterOption {
	return func(m *ParameterMutation) {
		var (
			err   error
			once  sync.Once
			value *Parameter
		)
		m.oldValue = func(ctx context.Context) (*Parameter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Parameter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withParameter sets the old Parameter of the mutation.
func withParameter(node *Parameter) parameterOption {
	return func(m *ParameterMutation) {
		m.oldValue = func(context.Context) (*Parameter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ParameterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ParameterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ParameterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ParameterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Parameter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ParameterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ParameterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ParameterMutation) ResetName() {
	m.name = nil
}

// AddFeaturedProductIDs adds the "featured_products" edge to the Product entity by ids.
func (m *ParameterMutation) AddFeaturedProductIDs(ids ...int) {
	if m.featured_products == nil {
		m.featured_products = make(map[int]struct{})
	}
	for i := range ids {
		m.featured_products[ids[i]] = struct{}{}
	}
}

// ClearFeaturedProducts clears the "featured_products" edge to the Product entity.
func (m *ParameterMutation) ClearFeaturedProducts() {
	m.clearedfeatured_products = true
}

// FeaturedProductsCleared reports if the "featured_products" edge to the Product entity was cleared.
func (m *ParameterMutation) FeaturedProductsCleared() bool {
	return m.clearedfeatured_products
}

// RemoveFeaturedProductIDs removes the "featured_products" edge to the Product entity by IDs.
func (m *ParameterMutation) RemoveFeaturedProductIDs(ids ...int) {
	if m.removedfeatured_products == nil {
		m.removedfeatured_products = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.featured_products, ids[i])
		m.removedfeatured_products[ids[i]] = struct{}{}
	}
}

// RemovedFeaturedProducts returns the removed IDs of the "featured_products" edge to the Product entity.
func (m *ParameterMutation) RemovedFeaturedProductsIDs() (ids []int) {
	for id := range m.removedfeatured_products {
		ids = append(ids, id)
	}
	return
}

// FeaturedProductsIDs returns the "featured_products" edge IDs in the mutation.
func (m *ParameterMutation) FeaturedProductsIDs() (ids []int) {
	for id := range m.featured_products {
		ids = append(ids, id)
	}
	return
}

// ResetFeaturedProducts resets all changes to the "featured_products" edge.
func (m *ParameterMutation) ResetFeaturedProducts() {
	m.featured_products = nil
	m.clearedfeatured_products = false
	m.removedfeatured_products = nil
}

// AddFeatureIDs adds the "features" edge to the Feature entity by ids.
func (m *ParameterMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (m *ParameterMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the Feature entity was cleared.
func (m *ParameterMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the Feature entity by IDs.
func (m *ParameterMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the Feature entity.
func (m *ParameterMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *ParameterMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *ParameterMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// Where appends a list predicates to the ParameterMutation builder.
func (m *ParameterMutation) Where(ps ...predicate.Parameter) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ParameterMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Parameter).
func (m *ParameterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ParameterMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, parameter.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ParameterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case parameter.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ParameterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case parameter.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Parameter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case parameter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ParameterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ParameterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Parameter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ParameterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ParameterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ParameterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Parameter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ParameterMutation) ResetField(name string) error {
	switch name {
	case parameter.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ParameterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.featured_products != nil {
		edges = append(edges, parameter.EdgeFeaturedProducts)
	}
	if m.features != nil {
		edges = append(edges, parameter.EdgeFeatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ParameterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case parameter.EdgeFeaturedProducts:
		ids := make([]ent.Value, 0, len(m.featured_products))
		for id := range m.featured_products {
			ids = append(ids, id)
		}
		return ids
	case parameter.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ParameterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfeatured_products != nil {
		edges = append(edges, parameter.EdgeFeaturedProducts)
	}
	if m.removedfeatures != nil {
		edges = append(edges, parameter.EdgeFeatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ParameterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case parameter.EdgeFeaturedProducts:
		ids := make([]ent.Value, 0, len(m.removedfeatured_products))
		for id := range m.removedfeatured_products {
			ids = append(ids, id)
		}
		return ids
	case parameter.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ParameterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfeatured_products {
		edges = append(edges, parameter.EdgeFeaturedProducts)
	}
	if m.clearedfeatures {
		edges = append(edges, parameter.EdgeFeatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ParameterMutation) EdgeCleared(name string) bool {
	switch name {
	case parameter.EdgeFeaturedProducts:
		return m.clearedfeatured_products
	case parameter.EdgeFeatures:
		return m.clearedfeatures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ParameterMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Parameter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ParameterMutation) ResetEdge(name string) error {
	switch name {
	case parameter.EdgeFeaturedProducts:
		m.ResetFeaturedProducts()
		return nil
	case parameter.EdgeFeatures:
		m.ResetFeatures()
		return nil
	}
	return fmt.Errorf("unknown Parameter edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	name                       *string
	clearedFields              map[string]struct{}
	featured_parameters        map[int]struct{}
	removedfeatured_parameters map[int]struct{}
	clearedfeatured_parameters bool
	features                   map[int]struct{}
	removedfeatures            map[int]struct{}
	clearedfeatures            bool
	done                       bool
	oldValue                   func(context.Context) (*Product, error)
	predicates                 []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// AddFeaturedParameterIDs adds the "featured_parameters" edge to the Parameter entity by ids.
func (m *ProductMutation) AddFeaturedParameterIDs(ids ...int) {
	if m.featured_parameters == nil {
		m.featured_parameters = make(map[int]struct{})
	}
	for i := range ids {
		m.featured_parameters[ids[i]] = struct{}{}
	}
}

// ClearFeaturedParameters clears the "featured_parameters" edge to the Parameter entity.
func (m *ProductMutation) ClearFeaturedParameters() {
	m.clearedfeatured_parameters = true
}

// FeaturedParametersCleared reports if the "featured_parameters" edge to the Parameter entity was cleared.
func (m *ProductMutation) FeaturedParametersCleared() bool {
	return m.clearedfeatured_parameters
}

// RemoveFeaturedParameterIDs removes the "featured_parameters" edge to the Parameter entity by IDs.
func (m *ProductMutation) RemoveFeaturedParameterIDs(ids ...int) {
	if m.removedfeatured_parameters == nil {
		m.removedfeatured_parameters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.featured_parameters, ids[i])
		m.removedfeatured_parameters[ids[i]] = struct{}{}
	}
}

// RemovedFeaturedParameters returns the removed IDs of the "featured_parameters" edge to the Parameter entity.
func (m *ProductMutation) RemovedFeaturedParametersIDs() (ids []int) {
	for id := range m.removedfeatured_parameters {
		ids = append(ids, id)
	}
	return
}

// FeaturedParametersIDs returns the "featured_parameters" edge IDs in the mutation.
func (m *ProductMutation) FeaturedParametersIDs() (ids []int) {
	for id := range m.featured_parameters {
		ids = append(ids, id)
	}
	return
}

// ResetFeaturedParameters resets all changes to the "featured_parameters" edge.
func (m *ProductMutation) ResetFeaturedParameters() {
	m.featured_parameters = nil
	m.clearedfeatured_parameters = false
	m.removedfeatured_parameters = nil
}

// AddFeatureIDs adds the "features" edge to the Feature entity by ids.
func (m *ProductMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (m *ProductMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the Feature entity was cleared.
func (m *ProductMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the Feature entity by IDs.
func (m *ProductMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the Feature entity.
func (m *ProductMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *ProductMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *ProductMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.featured_parameters != nil {
		edges = append(edges, product.EdgeFeaturedParameters)
	}
	if m.features != nil {
		edges = append(edges, product.EdgeFeatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeFeaturedParameters:
		ids := make([]ent.Value, 0, len(m.featured_parameters))
		for id := range m.featured_parameters {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfeatured_parameters != nil {
		edges = append(edges, product.EdgeFeaturedParameters)
	}
	if m.removedfeatures != nil {
		edges = append(edges, product.EdgeFeatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeFeaturedParameters:
		ids := make([]ent.Value, 0, len(m.removedfeatured_parameters))
		for id := range m.removedfeatured_parameters {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfeatured_parameters {
		edges = append(edges, product.EdgeFeaturedParameters)
	}
	if m.clearedfeatures {
		edges = append(edges, product.EdgeFeatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeFeaturedParameters:
		return m.clearedfeatured_parameters
	case product.EdgeFeatures:
		return m.clearedfeatures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeFeaturedParameters:
		m.ResetFeaturedParameters()
		return nil
	case product.EdgeFeatures:
		m.ResetFeatures()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// SegmentMutation represents an operation that mutates the Segment nodes in the graph.
type SegmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	number          *float64
	addnumber       *float64
	text            *string
	clearedFields   map[string]struct{}
	owner           *int
	clearedowner    bool
	features        map[int]struct{}
	removedfeatures map[int]struct{}
	clearedfeatures bool
	done            bool
	oldValue        func(context.Context) (*Segment, error)
	predicates      []predicate.Segment
}

var _ ent.Mutation = (*SegmentMutation)(nil)

// segmentOption allows management of the mutation configuration using functional options.
type segmentOption func(*SegmentMutation)

// newSegmentMutation creates new mutation for the Segment entity.
func newSegmentMutation(c config, op Op, opts ...segmentOption) *SegmentMutation {
	m := &SegmentMutation{
		config:        c,
		op:            op,
		typ:           TypeSegment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSegmentID sets the ID field of the mutation.
func withSegmentID(id int) segmentOption {
	return func(m *SegmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Segment
		)
		m.oldValue = func(ctx context.Context) (*Segment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Segment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSegment sets the old Segment of the mutation.
func withSegment(node *Segment) segmentOption {
	return func(m *SegmentMutation) {
		m.oldValue = func(context.Context) (*Segment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SegmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SegmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SegmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SegmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Segment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *SegmentMutation) SetNumber(f float64) {
	m.number = &f
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *SegmentMutation) Number() (r float64, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Segment entity.
// If the Segment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SegmentMutation) OldNumber(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds f to the "number" field.
func (m *SegmentMutation) AddNumber(f float64) {
	if m.addnumber != nil {
		*m.addnumber += f
	} else {
		m.addnumber = &f
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *SegmentMutation) AddedNumber() (r float64, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *SegmentMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetText sets the "text" field.
func (m *SegmentMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *SegmentMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Segment entity.
// If the Segment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SegmentMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *SegmentMutation) ResetText() {
	m.text = nil
}

// SetOwnerID sets the "owner" edge to the Article entity by id.
func (m *SegmentMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Article entity.
func (m *SegmentMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Article entity was cleared.
func (m *SegmentMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *SegmentMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *SegmentMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *SegmentMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddFeatureIDs adds the "features" edge to the Feature entity by ids.
func (m *SegmentMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the Feature entity.
func (m *SegmentMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the Feature entity was cleared.
func (m *SegmentMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the Feature entity by IDs.
func (m *SegmentMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the Feature entity.
func (m *SegmentMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *SegmentMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *SegmentMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// Where appends a list predicates to the SegmentMutation builder.
func (m *SegmentMutation) Where(ps ...predicate.Segment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SegmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Segment).
func (m *SegmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SegmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.number != nil {
		fields = append(fields, segment.FieldNumber)
	}
	if m.text != nil {
		fields = append(fields, segment.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SegmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case segment.FieldNumber:
		return m.Number()
	case segment.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SegmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case segment.FieldNumber:
		return m.OldNumber(ctx)
	case segment.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Segment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SegmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case segment.FieldNumber:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case segment.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Segment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SegmentMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, segment.FieldNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SegmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case segment.FieldNumber:
		return m.AddedNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SegmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case segment.FieldNumber:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Segment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SegmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SegmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SegmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Segment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SegmentMutation) ResetField(name string) error {
	switch name {
	case segment.FieldNumber:
		m.ResetNumber()
		return nil
	case segment.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Segment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SegmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, segment.EdgeOwner)
	}
	if m.features != nil {
		edges = append(edges, segment.EdgeFeatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SegmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case segment.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case segment.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SegmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfeatures != nil {
		edges = append(edges, segment.EdgeFeatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SegmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case segment.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SegmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, segment.EdgeOwner)
	}
	if m.clearedfeatures {
		edges = append(edges, segment.EdgeFeatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SegmentMutation) EdgeCleared(name string) bool {
	switch name {
	case segment.EdgeOwner:
		return m.clearedowner
	case segment.EdgeFeatures:
		return m.clearedfeatures
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SegmentMutation) ClearEdge(name string) error {
	switch name {
	case segment.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Segment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SegmentMutation) ResetEdge(name string) error {
	switch name {
	case segment.EdgeOwner:
		m.ResetOwner()
		return nil
	case segment.EdgeFeatures:
		m.ResetFeatures()
		return nil
	}
	return fmt.Errorf("unknown Segment edge %s", name)
}
